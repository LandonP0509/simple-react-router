{"ast":null,"code":"\"use client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\nconst _jsxruntime = require(\"react/jsx-runtime\");\nconst _react = /*#__PURE__*/_interop_require_default._(require(\"react\"));\nconst _resolvehref = require(\"./resolve-href\");\nconst _islocalurl = require(\"../shared/lib/router/utils/is-local-url\");\nconst _formaturl = require(\"../shared/lib/router/utils/format-url\");\nconst _utils = require(\"../shared/lib/utils\");\nconst _addlocale = require(\"./add-locale\");\nconst _routercontextsharedruntime = require(\"../shared/lib/router-context.shared-runtime\");\nconst _approutercontextsharedruntime = require(\"../shared/lib/app-router-context.shared-runtime\");\nconst _useintersection = require(\"./use-intersection\");\nconst _getdomainlocale = require(\"./get-domain-locale\");\nconst _addbasepath = require(\"./add-base-path\");\nconst _routerreducertypes = require(\"./components/router-reducer/router-reducer-types\");\nconst _usemergedref = require(\"./use-merged-ref\");\nconst prefetched = new Set();\nfunction prefetch(router, href, as, options, appOptions, isAppRouter) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n  if (!isAppRouter && !(0, _islocalurl.isLocalURL)(href)) {\n    return;\n  }\n  // We should only dedupe requests when experimental.optimisticClientCache is\n  // disabled & when we're not using the app router. App router handles\n  // reusing an existing prefetch entry (if it exists) for the same URL.\n  // If we dedupe in here, we will cause a race where different prefetch kinds\n  // to the same URL (ie auto vs true) will cause one to be ignored.\n  if (!options.bypassPrefetchedCheck && !isAppRouter) {\n    const locale =\n    // Let the link's locale prop override the default router locale.\n    typeof options.locale !== 'undefined' ? options.locale : 'locale' in router ? router.locale : undefined;\n    const prefetchedKey = href + '%' + as + '%' + locale;\n    // If we've already fetched the key, then don't prefetch it again!\n    if (prefetched.has(prefetchedKey)) {\n      return;\n    }\n    // Mark this URL as prefetched.\n    prefetched.add(prefetchedKey);\n  }\n  const doPrefetch = async () => {\n    if (isAppRouter) {\n      // note that `appRouter.prefetch()` is currently sync,\n      // so we have to wrap this call in an async function to be able to catch() errors below.\n      return router.prefetch(href, appOptions);\n    } else {\n      return router.prefetch(href, as, options);\n    }\n  };\n  // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  doPrefetch().catch(err => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err;\n    }\n  });\n}\nfunction isModifiedEvent(event) {\n  const eventTarget = event.currentTarget;\n  const target = eventTarget.getAttribute('target');\n  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey ||\n  // triggers resource download\n  event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter) {\n  const {\n    nodeName\n  } = e.currentTarget;\n  // anchors inside an svg have a lowercase nodeName\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A';\n  if (isAnchorNodeName && (isModifiedEvent(e) ||\n  // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n  !isAppRouter && !(0, _islocalurl.isLocalURL)(href))) {\n    // ignore click for browserâ€™s default behavior\n    return;\n  }\n  e.preventDefault();\n  const navigate = () => {\n    // If the router is an NextRouter instance it will have `beforePopState`\n    const routerScroll = scroll != null ? scroll : true;\n    if ('beforePopState' in router) {\n      router[replace ? 'replace' : 'push'](href, as, {\n        shallow,\n        locale,\n        scroll: routerScroll\n      });\n    } else {\n      router[replace ? 'replace' : 'push'](as || href, {\n        scroll: routerScroll\n      });\n    }\n  };\n  if (isAppRouter) {\n    _react.default.startTransition(navigate);\n  } else {\n    navigate();\n  }\n}\nfunction formatStringOrUrl(urlObjOrString) {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString;\n  }\n  return (0, _formaturl.formatUrl)(urlObjOrString);\n}\n/**\n * A React component that extends the HTML `<a>` element to provide [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation between routes.\n *\n * It is the primary way to navigate between routes in Next.js.\n *\n * Read more: [Next.js docs: `<Link>`](https://nextjs.org/docs/app/api-reference/components/link)\n */\nconst Link = /*#__PURE__*/_react.default.forwardRef(function LinkComponent(props, forwardedRef) {\n  let children;\n  const {\n    href: hrefProp,\n    as: asProp,\n    children: childrenProp,\n    prefetch: prefetchProp = null,\n    passHref,\n    replace,\n    shallow,\n    scroll,\n    locale,\n    onClick,\n    onMouseEnter: onMouseEnterProp,\n    onTouchStart: onTouchStartProp,\n    legacyBehavior = false,\n    ...restProps\n  } = props;\n  children = childrenProp;\n  if (legacyBehavior && (typeof children === 'string' || typeof children === 'number')) {\n    children = /*#__PURE__*/(0, _jsxruntime.jsx)(\"a\", {\n      children: children\n    });\n  }\n  const pagesRouter = _react.default.useContext(_routercontextsharedruntime.RouterContext);\n  const appRouter = _react.default.useContext(_approutercontextsharedruntime.AppRouterContext);\n  const router = pagesRouter != null ? pagesRouter : appRouter;\n  // We're in the app directory if there is no pages router.\n  const isAppRouter = !pagesRouter;\n  const prefetchEnabled = prefetchProp !== false;\n  /**\n   * The possible states for prefetch are:\n   * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n   * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n   * - false: we will not prefetch if in the viewport at all\n   */\n  const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;\n  if (process.env.NODE_ENV !== 'production') {\n    function createPropError(args) {\n      return new Error(\"Failed prop type: The prop `\" + args.key + \"` expects a \" + args.expected + \" in `<Link>`, but got `\" + args.actual + \"` instead.\" + (typeof window !== 'undefined' ? \"\\nOpen your browser's console to view the Component stack trace.\" : ''));\n    }\n    // TypeScript trick for type-guarding:\n    const requiredPropsGuard = {\n      href: true\n    };\n    const requiredProps = Object.keys(requiredPropsGuard);\n    requiredProps.forEach(key => {\n      if (key === 'href') {\n        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key]\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    });\n    // TypeScript trick for type-guarding:\n    const optionalPropsGuard = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      locale: true,\n      onClick: true,\n      onMouseEnter: true,\n      onTouchStart: true,\n      legacyBehavior: true\n    };\n    const optionalProps = Object.keys(optionalPropsGuard);\n    optionalProps.forEach(key => {\n      const valType = typeof props[key];\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType\n          });\n        }\n      } else if (key === 'locale') {\n        if (props[key] && valType !== 'string') {\n          throw createPropError({\n            key,\n            expected: '`string`',\n            actual: valType\n          });\n        }\n      } else if (key === 'onClick' || key === 'onMouseEnter' || key === 'onTouchStart') {\n        if (props[key] && valType !== 'function') {\n          throw createPropError({\n            key,\n            expected: '`function`',\n            actual: valType\n          });\n        }\n      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch' || key === 'legacyBehavior') {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (isAppRouter && !asProp) {\n      let href;\n      if (typeof hrefProp === 'string') {\n        href = hrefProp;\n      } else if (typeof hrefProp === 'object' && typeof hrefProp.pathname === 'string') {\n        href = hrefProp.pathname;\n      }\n      if (href) {\n        const hasDynamicSegment = href.split('/').some(segment => segment.startsWith('[') && segment.endsWith(']'));\n        if (hasDynamicSegment) {\n          throw new Error(\"Dynamic href `\" + href + \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\");\n        }\n      }\n    }\n  }\n  const {\n    href,\n    as\n  } = _react.default.useMemo(() => {\n    if (!pagesRouter) {\n      const resolvedHref = formatStringOrUrl(hrefProp);\n      return {\n        href: resolvedHref,\n        as: asProp ? formatStringOrUrl(asProp) : resolvedHref\n      };\n    }\n    const [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(pagesRouter, hrefProp, true);\n    return {\n      href: resolvedHref,\n      as: asProp ? (0, _resolvehref.resolveHref)(pagesRouter, asProp) : resolvedAs || resolvedHref\n    };\n  }, [pagesRouter, hrefProp, asProp]);\n  const previousHref = _react.default.useRef(href);\n  const previousAs = _react.default.useRef(as);\n  // This will return the first child, if multiple are provided it will throw an error\n  let child;\n  if (legacyBehavior) {\n    if (process.env.NODE_ENV === 'development') {\n      if (onClick) {\n        console.warn('\"onClick\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link');\n      }\n      if (onMouseEnterProp) {\n        console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link');\n      }\n      try {\n        child = _react.default.Children.only(children);\n      } catch (err) {\n        if (!children) {\n          throw new Error(\"No children were passed to <Link> with `href` of `\" + hrefProp + \"` but one child is required https://nextjs.org/docs/messages/link-no-children\");\n        }\n        throw new Error(\"Multiple children were passed to <Link> with `href` of `\" + hrefProp + \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\" + (typeof window !== 'undefined' ? \" \\nOpen your browser's console to view the Component stack trace.\" : ''));\n      }\n    } else {\n      child = _react.default.Children.only(children);\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if ((children == null ? void 0 : children.type) === 'a') {\n        throw new Error('Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor');\n      }\n    }\n  }\n  const childRef = legacyBehavior ? child && typeof child === 'object' && child.ref : forwardedRef;\n  const [setIntersectionRef, isVisible, resetVisible] = (0, _useintersection.useIntersection)({\n    rootMargin: '200px'\n  });\n  const setIntersectionWithResetRef = _react.default.useCallback(el => {\n    // Before the link getting observed, check if visible state need to be reset\n    if (previousAs.current !== as || previousHref.current !== href) {\n      resetVisible();\n      previousAs.current = as;\n      previousHref.current = href;\n    }\n    setIntersectionRef(el);\n  }, [as, href, resetVisible, setIntersectionRef]);\n  const setRef = (0, _usemergedref.useMergedRef)(setIntersectionWithResetRef, childRef);\n  // Prefetch the URL if we haven't already and it's visible.\n  _react.default.useEffect(() => {\n    // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n    if (process.env.NODE_ENV !== 'production') {\n      return;\n    }\n    if (!router) {\n      return;\n    }\n    // If we don't need to prefetch the URL, don't do prefetch.\n    if (!isVisible || !prefetchEnabled) {\n      return;\n    }\n    // Prefetch the URL.\n    prefetch(router, href, as, {\n      locale\n    }, {\n      kind: appPrefetchKind\n    }, isAppRouter);\n  }, [as, href, isVisible, locale, prefetchEnabled, pagesRouter == null ? void 0 : pagesRouter.locale, router, isAppRouter, appPrefetchKind]);\n  const childProps = {\n    ref: setRef,\n    onClick(e) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!e) {\n          throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n        }\n      }\n      if (!legacyBehavior && typeof onClick === 'function') {\n        onClick(e);\n      }\n      if (legacyBehavior && child.props && typeof child.props.onClick === 'function') {\n        child.props.onClick(e);\n      }\n      if (!router) {\n        return;\n      }\n      if (e.defaultPrevented) {\n        return;\n      }\n      linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter);\n    },\n    onMouseEnter(e) {\n      if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n        onMouseEnterProp(e);\n      }\n      if (legacyBehavior && child.props && typeof child.props.onMouseEnter === 'function') {\n        child.props.onMouseEnter(e);\n      }\n      if (!router) {\n        return;\n      }\n      if ((!prefetchEnabled || process.env.NODE_ENV === 'development') && isAppRouter) {\n        return;\n      }\n      prefetch(router, href, as, {\n        locale,\n        priority: true,\n        // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n        bypassPrefetchedCheck: true\n      }, {\n        kind: appPrefetchKind\n      }, isAppRouter);\n    },\n    onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START ? undefined : function onTouchStart(e) {\n      if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n        onTouchStartProp(e);\n      }\n      if (legacyBehavior && child.props && typeof child.props.onTouchStart === 'function') {\n        child.props.onTouchStart(e);\n      }\n      if (!router) {\n        return;\n      }\n      if (!prefetchEnabled && isAppRouter) {\n        return;\n      }\n      prefetch(router, href, as, {\n        locale,\n        priority: true,\n        // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n        bypassPrefetchedCheck: true\n      }, {\n        kind: appPrefetchKind\n      }, isAppRouter);\n    }\n  };\n  // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user.\n  // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n  if ((0, _utils.isAbsoluteUrl)(as)) {\n    childProps.href = as;\n  } else if (!legacyBehavior || passHref || child.type === 'a' && !('href' in child.props)) {\n    const curLocale = typeof locale !== 'undefined' ? locale : pagesRouter == null ? void 0 : pagesRouter.locale;\n    // we only render domain locales if we are currently on a domain locale\n    // so that locale links are still visitable in development/preview envs\n    const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getdomainlocale.getDomainLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);\n    childProps.href = localeDomain || (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));\n  }\n  return legacyBehavior ? /*#__PURE__*/_react.default.cloneElement(child, childProps) : /*#__PURE__*/(0, _jsxruntime.jsx)(\"a\", {\n    ...restProps,\n    ...childProps,\n    children: children\n  });\n});\nconst _default = Link;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["_interop_require_default","_","require","_usemergedref","prefetched","Set","prefetch","router","href","as","options","appOptions","isAppRouter","window","_islocalurl","isLocalURL","bypassPrefetchedCheck","locale","undefined","prefetchedKey","has","add","doPrefetch","catch","err","process","env","NODE_ENV","isModifiedEvent","event","eventTarget","currentTarget","target","getAttribute","metaKey","ctrlKey","shiftKey","altKey","nativeEvent","which","linkClicked","e","replace","shallow","scroll","nodeName","isAnchorNodeName","toUpperCase","preventDefault","navigate","routerScroll","_react","default","startTransition","formatStringOrUrl","urlObjOrString","_formaturl","formatUrl","Link","forwardRef","LinkComponent","props","forwardedRef","children","hrefProp","asProp","childrenProp","prefetchProp","passHref","onClick","onMouseEnter","onMouseEnterProp","onTouchStart","onTouchStartProp","legacyBehavior","restProps","_jsxruntime","jsx","pagesRouter","useContext","_routercontextsharedruntime","RouterContext","appRouter","_approutercontextsharedruntime","AppRouterContext","prefetchEnabled","appPrefetchKind","_routerreducertypes","PrefetchKind","AUTO","FULL","createPropError","args","Error","key","expected","actual","requiredPropsGuard","requiredProps","Object","keys","forEach","optionalPropsGuard","optionalProps","valType","pathname","hasDynamicSegment","split","some","segment","startsWith","endsWith","useMemo","resolvedHref","resolvedAs","_resolvehref","resolveHref","previousHref","useRef","previousAs","child","console","warn","Children","only","type","childRef","ref","setIntersectionRef","isVisible","resetVisible","_useintersection","useIntersection","rootMargin","setIntersectionWithResetRef","useCallback","el","current","setRef","useMergedRef","useEffect","kind","childProps","defaultPrevented","priority","__NEXT_LINK_NO_TOUCH_START","_utils","isAbsoluteUrl","curLocale","localeDomain","isLocaleDomain","_getdomainlocale","getDomainLocale","locales","domainLocales","_addbasepath","addBasePath","_addlocale","addLocale","defaultLocale","cloneElement"],"sources":["/Users/landonphillippi/node_modules/next/src/client/link.tsx"],"sourcesContent":["'use client'\n\nimport type {\n  NextRouter,\n  PrefetchOptions as RouterPrefetchOptions,\n} from '../shared/lib/router/router'\n\nimport React from 'react'\nimport type { UrlObject } from 'url'\nimport { resolveHref } from './resolve-href'\nimport { isLocalURL } from '../shared/lib/router/utils/is-local-url'\nimport { formatUrl } from '../shared/lib/router/utils/format-url'\nimport { isAbsoluteUrl } from '../shared/lib/utils'\nimport { addLocale } from './add-locale'\nimport { RouterContext } from '../shared/lib/router-context.shared-runtime'\nimport { AppRouterContext } from '../shared/lib/app-router-context.shared-runtime'\nimport type {\n  AppRouterInstance,\n  PrefetchOptions as AppRouterPrefetchOptions,\n} from '../shared/lib/app-router-context.shared-runtime'\nimport { useIntersection } from './use-intersection'\nimport { getDomainLocale } from './get-domain-locale'\nimport { addBasePath } from './add-base-path'\nimport { PrefetchKind } from './components/router-reducer/router-reducer-types'\nimport { useMergedRef } from './use-merged-ref'\n\ntype Url = string | UrlObject\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T]\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n}[keyof T]\n\ntype InternalLinkProps = {\n  /**\n   * The path or URL to navigate to. It can also be an object.\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#with-url-object\n   */\n  href: Url\n  /**\n   * Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes, check our [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes) to see how it worked. Note: when this path differs from the one provided in `href` the previous `href`/`as` behavior is used as shown in the [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes).\n   */\n  as?: Url\n  /**\n   * Replace the current `history` state instead of adding a new url into the stack.\n   *\n   * @defaultValue `false`\n   */\n  replace?: boolean\n  /**\n   * Whether to override the default scroll behavior\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#disable-scrolling-to-the-top-of-the-page\n   *\n   * @defaultValue `true`\n   */\n  scroll?: boolean\n  /**\n   * Update the path of the current page without rerunning [`getStaticProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props).\n   *\n   * @defaultValue `false`\n   */\n  shallow?: boolean\n  /**\n   * Forces `Link` to send the `href` property to its child.\n   *\n   * @defaultValue `false`\n   */\n  passHref?: boolean\n  /**\n   * Prefetch the page in the background.\n   * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n   * Prefetch can be disabled by passing `prefetch={false}`. Prefetching is only enabled in production.\n   *\n   * In App Router:\n   * - `null` (default): For statically generated pages, this will prefetch the full React Server Component data. For dynamic pages, this will prefetch up to the nearest route segment with a [`loading.js`](https://nextjs.org/docs/app/api-reference/file-conventions/loading) file. If there is no loading file, it will not fetch the full tree to avoid fetching too much data.\n   * - `true`: This will prefetch the full React Server Component data for all route segments, regardless of whether they contain a segment with `loading.js`.\n   * - `false`: This will not prefetch any data, even on hover.\n   *\n   * In Pages Router:\n   * - `true` (default): The full route & its data will be prefetched.\n   * - `false`: Prefetching will not happen when entering the viewport, but will still happen on hover.\n   * @defaultValue `true` (pages router) or `null` (app router)\n   */\n  prefetch?: boolean | null\n  /**\n   * The active locale is automatically prepended. `locale` allows for providing a different locale.\n   * When `false` `href` has to include the locale as the default behavior is disabled.\n   */\n  locale?: string | false\n  /**\n   * Enable legacy link behavior.\n   * @defaultValue `false`\n   * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n   */\n  legacyBehavior?: boolean\n  /**\n   * Optional event handler for when the mouse pointer is moved onto Link\n   */\n  onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is touched.\n   */\n  onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n}\n\n// TODO-APP: Include the full set of Anchor props\n// adding this to the publicly exported type currently breaks existing apps\n\n// `RouteInferType` is a stub here to avoid breaking `typedRoutes` when the type\n// isn't generated yet. It will be replaced when the webpack plugin runs.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type LinkProps<RouteInferType = any> = InternalLinkProps\ntype LinkPropsRequired = RequiredKeys<LinkProps>\ntype LinkPropsOptional = OptionalKeys<InternalLinkProps>\n\nconst prefetched = new Set<string>()\n\ntype PrefetchOptions = RouterPrefetchOptions & {\n  /**\n   * bypassPrefetchedCheck will bypass the check to see if the `href` has\n   * already been fetched.\n   */\n  bypassPrefetchedCheck?: boolean\n}\n\nfunction prefetch(\n  router: NextRouter | AppRouterInstance,\n  href: string,\n  as: string,\n  options: PrefetchOptions,\n  appOptions: AppRouterPrefetchOptions,\n  isAppRouter: boolean\n): void {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n  if (!isAppRouter && !isLocalURL(href)) {\n    return\n  }\n\n  // We should only dedupe requests when experimental.optimisticClientCache is\n  // disabled & when we're not using the app router. App router handles\n  // reusing an existing prefetch entry (if it exists) for the same URL.\n  // If we dedupe in here, we will cause a race where different prefetch kinds\n  // to the same URL (ie auto vs true) will cause one to be ignored.\n  if (!options.bypassPrefetchedCheck && !isAppRouter) {\n    const locale =\n      // Let the link's locale prop override the default router locale.\n      typeof options.locale !== 'undefined'\n        ? options.locale\n        : // Otherwise fallback to the router's locale.\n          'locale' in router\n          ? router.locale\n          : undefined\n\n    const prefetchedKey = href + '%' + as + '%' + locale\n\n    // If we've already fetched the key, then don't prefetch it again!\n    if (prefetched.has(prefetchedKey)) {\n      return\n    }\n\n    // Mark this URL as prefetched.\n    prefetched.add(prefetchedKey)\n  }\n\n  const doPrefetch = async () => {\n    if (isAppRouter) {\n      // note that `appRouter.prefetch()` is currently sync,\n      // so we have to wrap this call in an async function to be able to catch() errors below.\n      return (router as AppRouterInstance).prefetch(href, appOptions)\n    } else {\n      return (router as NextRouter).prefetch(href, as, options)\n    }\n  }\n\n  // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  doPrefetch().catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n}\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const eventTarget = event.currentTarget as HTMLAnchorElement | SVGAElement\n  const target = eventTarget.getAttribute('target')\n  return (\n    (target && target !== '_self') ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  )\n}\n\nfunction linkClicked(\n  e: React.MouseEvent,\n  router: NextRouter | AppRouterInstance,\n  href: string,\n  as: string,\n  replace?: boolean,\n  shallow?: boolean,\n  scroll?: boolean,\n  locale?: string | false,\n  isAppRouter?: boolean\n): void {\n  const { nodeName } = e.currentTarget\n\n  // anchors inside an svg have a lowercase nodeName\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A'\n\n  if (\n    isAnchorNodeName &&\n    (isModifiedEvent(e) ||\n      // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n      (!isAppRouter && !isLocalURL(href)))\n  ) {\n    // ignore click for browserâ€™s default behavior\n    return\n  }\n\n  e.preventDefault()\n\n  const navigate = () => {\n    // If the router is an NextRouter instance it will have `beforePopState`\n    const routerScroll = scroll ?? true\n    if ('beforePopState' in router) {\n      router[replace ? 'replace' : 'push'](href, as, {\n        shallow,\n        locale,\n        scroll: routerScroll,\n      })\n    } else {\n      router[replace ? 'replace' : 'push'](as || href, {\n        scroll: routerScroll,\n      })\n    }\n  }\n\n  if (isAppRouter) {\n    React.startTransition(navigate)\n  } else {\n    navigate()\n  }\n}\n\ntype LinkPropsReal = React.PropsWithChildren<\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof LinkProps> &\n    LinkProps\n>\n\nfunction formatStringOrUrl(urlObjOrString: UrlObject | string): string {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString\n  }\n\n  return formatUrl(urlObjOrString)\n}\n\n/**\n * A React component that extends the HTML `<a>` element to provide [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation between routes.\n *\n * It is the primary way to navigate between routes in Next.js.\n *\n * Read more: [Next.js docs: `<Link>`](https://nextjs.org/docs/app/api-reference/components/link)\n */\nconst Link = React.forwardRef<HTMLAnchorElement, LinkPropsReal>(\n  function LinkComponent(props, forwardedRef) {\n    let children: React.ReactNode\n\n    const {\n      href: hrefProp,\n      as: asProp,\n      children: childrenProp,\n      prefetch: prefetchProp = null,\n      passHref,\n      replace,\n      shallow,\n      scroll,\n      locale,\n      onClick,\n      onMouseEnter: onMouseEnterProp,\n      onTouchStart: onTouchStartProp,\n      legacyBehavior = false,\n      ...restProps\n    } = props\n\n    children = childrenProp\n\n    if (\n      legacyBehavior &&\n      (typeof children === 'string' || typeof children === 'number')\n    ) {\n      children = <a>{children}</a>\n    }\n\n    const pagesRouter = React.useContext(RouterContext)\n    const appRouter = React.useContext(AppRouterContext)\n    const router = pagesRouter ?? appRouter\n\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter\n\n    const prefetchEnabled = prefetchProp !== false\n    /**\n     * The possible states for prefetch are:\n     * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n     * - false: we will not prefetch if in the viewport at all\n     */\n    const appPrefetchKind =\n      prefetchProp === null ? PrefetchKind.AUTO : PrefetchKind.FULL\n\n    if (process.env.NODE_ENV !== 'production') {\n      function createPropError(args: {\n        key: string\n        expected: string\n        actual: string\n      }) {\n        return new Error(\n          `Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` +\n            (typeof window !== 'undefined'\n              ? \"\\nOpen your browser's console to view the Component stack trace.\"\n              : '')\n        )\n      }\n\n      // TypeScript trick for type-guarding:\n      const requiredPropsGuard: Record<LinkPropsRequired, true> = {\n        href: true,\n      } as const\n      const requiredProps: LinkPropsRequired[] = Object.keys(\n        requiredPropsGuard\n      ) as LinkPropsRequired[]\n      requiredProps.forEach((key: LinkPropsRequired) => {\n        if (key === 'href') {\n          if (\n            props[key] == null ||\n            (typeof props[key] !== 'string' && typeof props[key] !== 'object')\n          ) {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: props[key] === null ? 'null' : typeof props[key],\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const _: never = key\n        }\n      })\n\n      // TypeScript trick for type-guarding:\n      const optionalPropsGuard: Record<LinkPropsOptional, true> = {\n        as: true,\n        replace: true,\n        scroll: true,\n        shallow: true,\n        passHref: true,\n        prefetch: true,\n        locale: true,\n        onClick: true,\n        onMouseEnter: true,\n        onTouchStart: true,\n        legacyBehavior: true,\n      } as const\n      const optionalProps: LinkPropsOptional[] = Object.keys(\n        optionalPropsGuard\n      ) as LinkPropsOptional[]\n      optionalProps.forEach((key: LinkPropsOptional) => {\n        const valType = typeof props[key]\n\n        if (key === 'as') {\n          if (props[key] && valType !== 'string' && valType !== 'object') {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: valType,\n            })\n          }\n        } else if (key === 'locale') {\n          if (props[key] && valType !== 'string') {\n            throw createPropError({\n              key,\n              expected: '`string`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'onClick' ||\n          key === 'onMouseEnter' ||\n          key === 'onTouchStart'\n        ) {\n          if (props[key] && valType !== 'function') {\n            throw createPropError({\n              key,\n              expected: '`function`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'replace' ||\n          key === 'scroll' ||\n          key === 'shallow' ||\n          key === 'passHref' ||\n          key === 'prefetch' ||\n          key === 'legacyBehavior'\n        ) {\n          if (props[key] != null && valType !== 'boolean') {\n            throw createPropError({\n              key,\n              expected: '`boolean`',\n              actual: valType,\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const _: never = key\n        }\n      })\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isAppRouter && !asProp) {\n        let href: string | undefined\n        if (typeof hrefProp === 'string') {\n          href = hrefProp\n        } else if (\n          typeof hrefProp === 'object' &&\n          typeof hrefProp.pathname === 'string'\n        ) {\n          href = hrefProp.pathname\n        }\n\n        if (href) {\n          const hasDynamicSegment = href\n            .split('/')\n            .some((segment) => segment.startsWith('[') && segment.endsWith(']'))\n\n          if (hasDynamicSegment) {\n            throw new Error(\n              `Dynamic href \\`${href}\\` found in <Link> while using the \\`/app\\` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href`\n            )\n          }\n        }\n      }\n    }\n\n    const { href, as } = React.useMemo(() => {\n      if (!pagesRouter) {\n        const resolvedHref = formatStringOrUrl(hrefProp)\n        return {\n          href: resolvedHref,\n          as: asProp ? formatStringOrUrl(asProp) : resolvedHref,\n        }\n      }\n\n      const [resolvedHref, resolvedAs] = resolveHref(\n        pagesRouter,\n        hrefProp,\n        true\n      )\n\n      return {\n        href: resolvedHref,\n        as: asProp\n          ? resolveHref(pagesRouter, asProp)\n          : resolvedAs || resolvedHref,\n      }\n    }, [pagesRouter, hrefProp, asProp])\n\n    const previousHref = React.useRef<string>(href)\n    const previousAs = React.useRef<string>(as)\n\n    // This will return the first child, if multiple are provided it will throw an error\n    let child: any\n    if (legacyBehavior) {\n      if (process.env.NODE_ENV === 'development') {\n        if (onClick) {\n          console.warn(\n            `\"onClick\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link`\n          )\n        }\n        if (onMouseEnterProp) {\n          console.warn(\n            `\"onMouseEnter\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link`\n          )\n        }\n        try {\n          child = React.Children.only(children)\n        } catch (err) {\n          if (!children) {\n            throw new Error(\n              `No children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`\n            )\n          }\n          throw new Error(\n            `Multiple children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` +\n              (typeof window !== 'undefined'\n                ? \" \\nOpen your browser's console to view the Component stack trace.\"\n                : '')\n          )\n        }\n      } else {\n        child = React.Children.only(children)\n      }\n    } else {\n      if (process.env.NODE_ENV === 'development') {\n        if ((children as any)?.type === 'a') {\n          throw new Error(\n            'Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'\n          )\n        }\n      }\n    }\n\n    const childRef: any = legacyBehavior\n      ? child && typeof child === 'object' && child.ref\n      : forwardedRef\n\n    const [setIntersectionRef, isVisible, resetVisible] = useIntersection({\n      rootMargin: '200px',\n    })\n\n    const setIntersectionWithResetRef = React.useCallback(\n      (el: Element) => {\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n          resetVisible()\n          previousAs.current = as\n          previousHref.current = href\n        }\n\n        setIntersectionRef(el)\n      },\n      [as, href, resetVisible, setIntersectionRef]\n    )\n\n    const setRef = useMergedRef(setIntersectionWithResetRef, childRef)\n\n    // Prefetch the URL if we haven't already and it's visible.\n    React.useEffect(() => {\n      // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n      if (process.env.NODE_ENV !== 'production') {\n        return\n      }\n\n      if (!router) {\n        return\n      }\n\n      // If we don't need to prefetch the URL, don't do prefetch.\n      if (!isVisible || !prefetchEnabled) {\n        return\n      }\n\n      // Prefetch the URL.\n      prefetch(\n        router,\n        href,\n        as,\n        { locale },\n        {\n          kind: appPrefetchKind,\n        },\n        isAppRouter\n      )\n    }, [\n      as,\n      href,\n      isVisible,\n      locale,\n      prefetchEnabled,\n      pagesRouter?.locale,\n      router,\n      isAppRouter,\n      appPrefetchKind,\n    ])\n\n    const childProps: {\n      onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n      onMouseEnter: React.MouseEventHandler<HTMLAnchorElement>\n      onClick: React.MouseEventHandler<HTMLAnchorElement>\n      href?: string\n      ref?: any\n    } = {\n      ref: setRef,\n      onClick(e) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!e) {\n            throw new Error(\n              `Component rendered inside next/link has to pass click event to \"onClick\" prop.`\n            )\n          }\n        }\n\n        if (!legacyBehavior && typeof onClick === 'function') {\n          onClick(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onClick === 'function'\n        ) {\n          child.props.onClick(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        if (e.defaultPrevented) {\n          return\n        }\n\n        linkClicked(\n          e,\n          router,\n          href,\n          as,\n          replace,\n          shallow,\n          scroll,\n          locale,\n          isAppRouter\n        )\n      },\n      onMouseEnter(e) {\n        if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n          onMouseEnterProp(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onMouseEnter === 'function'\n        ) {\n          child.props.onMouseEnter(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        if (\n          (!prefetchEnabled || process.env.NODE_ENV === 'development') &&\n          isAppRouter\n        ) {\n          return\n        }\n\n        prefetch(\n          router,\n          href,\n          as,\n          {\n            locale,\n            priority: true,\n            // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n            bypassPrefetchedCheck: true,\n          },\n          {\n            kind: appPrefetchKind,\n          },\n          isAppRouter\n        )\n      },\n      onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START\n        ? undefined\n        : function onTouchStart(e) {\n            if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n              onTouchStartProp(e)\n            }\n\n            if (\n              legacyBehavior &&\n              child.props &&\n              typeof child.props.onTouchStart === 'function'\n            ) {\n              child.props.onTouchStart(e)\n            }\n\n            if (!router) {\n              return\n            }\n\n            if (!prefetchEnabled && isAppRouter) {\n              return\n            }\n\n            prefetch(\n              router,\n              href,\n              as,\n              {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true,\n              },\n              {\n                kind: appPrefetchKind,\n              },\n              isAppRouter\n            )\n          },\n    }\n\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user.\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if (isAbsoluteUrl(as)) {\n      childProps.href = as\n    } else if (\n      !legacyBehavior ||\n      passHref ||\n      (child.type === 'a' && !('href' in child.props))\n    ) {\n      const curLocale =\n        typeof locale !== 'undefined' ? locale : pagesRouter?.locale\n\n      // we only render domain locales if we are currently on a domain locale\n      // so that locale links are still visitable in development/preview envs\n      const localeDomain =\n        pagesRouter?.isLocaleDomain &&\n        getDomainLocale(\n          as,\n          curLocale,\n          pagesRouter?.locales,\n          pagesRouter?.domainLocales\n        )\n\n      childProps.href =\n        localeDomain ||\n        addBasePath(addLocale(as, curLocale, pagesRouter?.defaultLocale))\n    }\n\n    return legacyBehavior ? (\n      React.cloneElement(child, childProps)\n    ) : (\n      <a {...restProps} {...childProps}>\n        {children}\n      </a>\n    )\n  }\n)\n\nexport default Link\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}