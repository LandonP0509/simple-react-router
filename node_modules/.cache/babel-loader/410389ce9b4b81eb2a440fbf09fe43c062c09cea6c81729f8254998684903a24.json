{"ast":null,"code":"\"use client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  default: null,\n  defaultHead: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  default: function () {\n    return _default;\n  },\n  defaultHead: function () {\n    return defaultHead;\n  }\n});\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\nconst _interop_require_wildcard = require(\"@swc/helpers/_/_interop_require_wildcard\");\nconst _jsxruntime = require(\"react/jsx-runtime\");\nconst _react = /*#__PURE__*/_interop_require_wildcard._(require(\"react\"));\nconst _sideeffect = /*#__PURE__*/_interop_require_default._(require(\"./side-effect\"));\nconst _ampcontextsharedruntime = require(\"./amp-context.shared-runtime\");\nconst _headmanagercontextsharedruntime = require(\"./head-manager-context.shared-runtime\");\nconst _ampmode = require(\"./amp-mode\");\nconst _warnonce = require(\"./utils/warn-once\");\nfunction defaultHead(inAmpMode) {\n  if (inAmpMode === void 0) inAmpMode = false;\n  const head = [/*#__PURE__*/(0, _jsxruntime.jsx)(\"meta\", {\n    charSet: \"utf-8\"\n  }, \"charset\")];\n  if (!inAmpMode) {\n    head.push(/*#__PURE__*/(0, _jsxruntime.jsx)(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }, \"viewport\"));\n  }\n  return head;\n}\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  }\n  // Adds support for React.Fragment\n  if (child.type === _react.default.Fragment) {\n    return list.concat(\n    // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n    _react.default.Children.toArray(child.props.children).reduce(\n    // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n    (fragmentList, fragmentChild) => {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n  return list.concat(child);\n}\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set();\n  const tags = new Set();\n  const metaTypes = new Set();\n  const metaCategories = {};\n  return h => {\n    let isUnique = true;\n    let hasKey = false;\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true;\n      const key = h.key.slice(h.key.indexOf('$') + 1);\n      if (keys.has(key)) {\n        isUnique = false;\n      } else {\n        keys.add(key);\n      }\n    }\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false;\n        } else {\n          tags.add(h.type);\n        }\n        break;\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            const category = h.props[metatype];\n            const categories = metaCategories[metatype] || new Set();\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n        break;\n    }\n    return isUnique;\n  };\n}\n/**\n *\n * @param headChildrenElements List of children of <Head>\n */\nfunction reduceComponents(headChildrenElements, props) {\n  const {\n    inAmpMode\n  } = props;\n  return headChildrenElements.reduce(onlyReactElement, []).reverse().concat(defaultHead(inAmpMode).reverse()).filter(unique()).reverse().map((c, i) => {\n    const key = c.key || i;\n    if (process.env.NODE_ENV !== 'development' && process.env.__NEXT_OPTIMIZE_FONTS && !inAmpMode) {\n      if (c.type === 'link' && c.props['href'] &&\n      // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n      ['https://fonts.googleapis.com/css', 'https://use.typekit.net/'].some(url => c.props['href'].startsWith(url))) {\n        const newProps = {\n          ...(c.props || {})\n        };\n        newProps['data-href'] = newProps['href'];\n        newProps['href'] = undefined;\n        // Add this attribute to make it easy to identify optimized tags\n        newProps['data-optimized-fonts'] = true;\n        return /*#__PURE__*/_react.default.cloneElement(c, newProps);\n      }\n    }\n    if (process.env.NODE_ENV === 'development') {\n      // omit JSON-LD structured data snippets from the warning\n      if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n        const srcMessage = c.props['src'] ? '<script> tag with src=\"' + c.props['src'] + '\"' : \"inline <script>\";\n        (0, _warnonce.warnOnce)(\"Do not add <script> tags using next/head (see \" + srcMessage + \"). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component\");\n      } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n        (0, _warnonce.warnOnce)('Do not add stylesheets using next/head (see <link rel=\"stylesheet\"> tag with href=\"' + c.props['href'] + '\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component');\n      }\n    }\n    return /*#__PURE__*/_react.default.cloneElement(c, {\n      key\n    });\n  });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head(param) {\n  let {\n    children\n  } = param;\n  const ampState = (0, _react.useContext)(_ampcontextsharedruntime.AmpStateContext);\n  const headManager = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n  return /*#__PURE__*/(0, _jsxruntime.jsx)(_sideeffect.default, {\n    reduceComponentsToState: reduceComponents,\n    headManager: headManager,\n    inAmpMode: (0, _ampmode.isInAmpMode)(ampState),\n    children: children\n  });\n}\nconst _default = Head;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["exports","defaultHead","_","require","_warnonce","inAmpMode","_jsxruntime","jsx","charSet","push","name","content","head","onlyReactElement","list","child","type","_react","default","Fragment","concat","Children","toArray","props","children","reduce","fragmentChild","fragmentList","METATYPES","unique","keys","Set","tags","metaTypes","metaCategories","h","isUnique","hasKey","key","indexOf","slice","has","add","i","len","length","metatype","hasOwnProperty","category","categories","reduceComponents","headChildrenElements","reverse","filter","map","c","process","env","NODE_ENV","__NEXT_OPTIMIZE_FONTS","url","startsWith","newProps","undefined","cloneElement","srcMessage","warnOnce","Head","param","ampState","useContext","_ampcontextsharedruntime","AmpStateContext","headManager","_headmanagercontextsharedruntime","HeadManagerContext","_sideeffect","reduceComponentsToState","_ampmode","isInAmpMode"],"sources":["/Users/landonphillippi/node_modules/next/src/shared/lib/head.tsx"],"sourcesContent":["'use client'\n\nimport React, { useContext, type JSX } from 'react'\nimport Effect from './side-effect'\nimport { AmpStateContext } from './amp-context.shared-runtime'\nimport { HeadManagerContext } from './head-manager-context.shared-runtime'\nimport { isInAmpMode } from './amp-mode'\nimport { warnOnce } from './utils/warn-once'\n\ntype WithInAmpMode = {\n  inAmpMode?: boolean\n}\n\nexport function defaultHead(inAmpMode = false): JSX.Element[] {\n  const head = [<meta charSet=\"utf-8\" key=\"charset\" />]\n  if (!inAmpMode) {\n    head.push(\n      <meta name=\"viewport\" content=\"width=device-width\" key=\"viewport\" />\n    )\n  }\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactElement | number | string\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n      React.Children.toArray(child.props.children).reduce(\n        // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactElement | number | string\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let isUnique = true\n    let hasKey = false\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        isUnique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return isUnique\n  }\n}\n\n/**\n *\n * @param headChildrenElements List of children of <Head>\n */\nfunction reduceComponents<T extends {} & WithInAmpMode>(\n  headChildrenElements: Array<React.ReactElement<any>>,\n  props: T\n) {\n  const { inAmpMode } = props\n  return headChildrenElements\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead(inAmpMode).reverse())\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      if (\n        process.env.NODE_ENV !== 'development' &&\n        process.env.__NEXT_OPTIMIZE_FONTS &&\n        !inAmpMode\n      ) {\n        if (\n          c.type === 'link' &&\n          c.props['href'] &&\n          // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n          ['https://fonts.googleapis.com/css', 'https://use.typekit.net/'].some(\n            (url) => c.props['href'].startsWith(url)\n          )\n        ) {\n          const newProps = { ...(c.props || {}) }\n          newProps['data-href'] = newProps['href']\n          newProps['href'] = undefined\n\n          // Add this attribute to make it easy to identify optimized tags\n          newProps['data-optimized-fonts'] = true\n\n          return React.cloneElement(c, newProps)\n        }\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // omit JSON-LD structured data snippets from the warning\n        if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n          const srcMessage = c.props['src']\n            ? `<script> tag with src=\"${c.props['src']}\"`\n            : `inline <script>`\n          warnOnce(\n            `Do not add <script> tags using next/head (see ${srcMessage}). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component`\n          )\n        } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n          warnOnce(\n            `Do not add stylesheets using next/head (see <link rel=\"stylesheet\"> tag with href=\"${c.props['href']}\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component`\n          )\n        }\n      }\n      return React.cloneElement(c, { key })\n    })\n}\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  const ampState = useContext(AmpStateContext)\n  const headManager = useContext(HeadManagerContext)\n  return (\n    <Effect\n      reduceComponentsToState={reduceComponents}\n      headManager={headManager}\n      inAmpMode={isInAmpMode(ampState)}\n    >\n      {children}\n    </Effect>\n  )\n}\n\nexport default Head\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}